// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["orderByNulls"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid()) @db.Uuid
  username  String    @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  email     String?   @db.VarChar(450)
  firstName String?   @map("first_name") @db.VarChar(255)
  lastName  String?   @map("last_name") @db.VarChar(255)
  birthDate DateTime? @map("birth_date") @db.Date
  salary    Decimal?  @db.Decimal(12, 3)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  userRoles     UserRole[]
  refreshTokens RefreshToken[]

  followers Relationship[] @relation(name: "fk_follower")
  followees Relationship[] @relation(name: "fk_followee")

  roomMembers  RoomMember[]
  roomMessages RoomMessage[]

  todos             Todo[]
  VerificationToken VerificationToken[]

  @@map("users")
}

model Role {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique @db.VarChar(255)
  sort Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  id     String @id @default(uuid()) @db.Uuid
  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId String @map("role_id") @db.Uuid
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Relationship {
  id String @id @default(uuid()) @db.Uuid

  followerId String @map("follower_id") @db.Uuid
  follower   User   @relation(name: "fk_follower", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followeeId String @map("followee_id") @db.Uuid
  followee   User   @relation(name: "fk_followee", fields: [followeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([followerId, followeeId])
  @@map("relationships")
}

model RefreshToken {
  id             String    @id @default(uuid()) @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  token          String    @default(cuid()) @db.VarChar(255)
  expires        DateTime
  createdByIp    String    @map("created_by_ip") @db.VarChar(255)
  revoked        DateTime?
  revokedByIp    String?   @map("revoked_by_ip") @db.VarChar(255)
  replaceByToken String?   @map("replace_by_token") @db.VarChar(255)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([expires(sort: Desc), revoked(sort: Desc)])
  @@map("refresh_tokens")
}

enum VerificationTokenType {
  ResetPassword @map("reset_password")
  VerifyEmail   @map("verify_email")

  @@map("verification_token_type")
}

model VerificationToken {
  id      String                @id @default(uuid()) @db.Uuid
  userId  String                @map("user_id") @db.Uuid
  user    User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  token   String                @default(cuid()) @db.VarChar(255)
  type    VerificationTokenType
  expires DateTime
  revoked DateTime?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([expires(sort: Desc), revoked(sort: Desc)])
  @@map("verification_tokens")
}

model Todo {
  id Int @id @default(autoincrement())

  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  title       String  @db.VarChar(64)
  description String? @db.VarChar(450)
  isCompleted Boolean @default(false) @map("is_completed")
  sort        Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("todos")
}

model Room {
  id              String    @id @default(uuid()) @db.Uuid
  name            String    @db.VarChar(255)
  isGroup         Boolean   @default(false) @map("is_group")
  lastActivatedAt DateTime? @map("last_activated_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  roomMembers  RoomMember[]
  roomMessages RoomMessage[]

  @@map("rooms")
}

enum RoomMemberRole {
  Admin     @map("admin")
  Moderator @map("moderator")
  Member    @map("member")
  None      @map("none")

  @@map("room_member_role")
}

model RoomMember {
  id String @id @default(uuid()) @db.Uuid

  roomId    String         @map("room_id") @db.Uuid
  room      Room           @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId  String         @map("member_id") @db.Uuid
  member    User           @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  nickName  String?        @map("nick_name") @db.VarChar(255)
  role      RoomMemberRole @default(Member)
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @default(now()) @updatedAt @map("updated_at")

  @@unique([roomId, memberId])
  @@map("room_members")
}

enum RoomMessageType {
  Text   @map("text")
  Icon   @map("icon")
  Icons  @map("icons")
  Link   @map("link")
  Image  @map("image")
  Images @map("images")
  Files  @map("files")
  Audios @map("audios")
  Medias @map("medias")
  None   @map("none")

  @@map("room_message_type")
}

model RoomMessage {
  id      String          @id @default(uuid()) @db.Uuid
  type    RoomMessageType @default(Text)
  content Json

  roomId String @map("room_id") @db.Uuid
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([roomId, createdAt(sort: Desc)])
  @@map("room_messages")
}
