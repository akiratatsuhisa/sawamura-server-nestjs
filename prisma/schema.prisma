// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid()) @db.Uuid
  username       String    @unique @db.VarChar(255)
  password       String?   @db.VarChar(255)
  displayName    String    @db.VarChar(128)
  email          String?   @db.VarChar(255)
  emailConfirmed Boolean   @default(false) @map("email_confirmed")
  firstName      String?   @map("first_name") @db.VarChar(128)
  lastName       String?   @map("last_name") @db.VarChar(128)
  birthDate      DateTime? @map("birth_date") @db.Date
  location       String?   @db.VarChar(32)
  salary         Decimal?  @db.Decimal(12, 3)
  biography      String?   @db.VarChar(192)
  websiteLink    String?   @db.VarChar(128)
  securityStamp  String    @map("security_stamp") @db.VarChar(128)

  photoUrl    String? @map("photo_url") @db.VarChar(450)
  coverUrl    String? @map("cover_url") @db.VarChar(450)
  themeSource BigInt? @map("theme_source")
  themeStyle  String? @map("theme_style") @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  userRoles          UserRole[]
  userLogins         UserLogins[]
  refreshTokens      RefreshToken[]
  verificationTokens VerificationToken[]

  followers Relationship[] @relation(name: "fk_follower")
  followees Relationship[] @relation(name: "fk_followee")

  roomMembers  RoomMember[]
  roomMessages RoomMessage[]

  whinnies        Whinny[]
  whinnyReactions WhinnyReaction[]

  notificationSource Notification[] @relation(name: "fk_notification_source")
  notificationTarget Notification[] @relation(name: "fk_notification_target")

  @@map("users")
}

model Role {
  id      String  @id @default(uuid()) @db.Uuid
  name    String  @unique @db.VarChar(255)
  sort    Int
  default Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  userRoles UserRole[]

  @@index([sort(sort: Asc)])
  @@map("roles")
}

model UserRole {
  id     String @id @default(uuid()) @db.Uuid
  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId String @map("role_id") @db.Uuid
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([userId, roleId])
  @@map("user_roles")
}

model UserLogins {
  id           String @id @default(uuid()) @db.Uuid
  userId       String @map("user_id") @db.Uuid
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  providerName String @map("provider_name") @db.VarChar(255)
  providerKey  String @map("provider_key") @db.VarChar(450)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([userId, providerName])
  @@unique([providerName, providerKey])
  @@map("user_logins")
}

model Relationship {
  id String @id @default(uuid()) @db.Uuid

  followerId String @map("follower_id") @db.Uuid
  follower   User   @relation(name: "fk_follower", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followeeId String @map("followee_id") @db.Uuid
  followee   User   @relation(name: "fk_followee", fields: [followeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([followerId, followeeId])
  @@map("relationships")
}

model RefreshToken {
  id             String    @id @default(uuid()) @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  token          String    @default(cuid()) @db.VarChar(255)
  expires        DateTime
  createdByIp    String    @map("created_by_ip") @db.VarChar(255)
  revoked        DateTime?
  revokedByIp    String?   @map("revoked_by_ip") @db.VarChar(255)
  replaceByToken String?   @map("replace_by_token") @db.VarChar(255)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([expires(sort: Desc), revoked(sort: Desc)])
  @@map("refresh_tokens")
}

enum VerificationTokenType {
  ResetPassword     @map("reset_password")
  VerifyEmail       @map("verify_email")
  LinkProviderLogin @map("link_provider_login")

  @@map("verification_token_type")
}

model VerificationToken {
  id      String                @id @default(uuid()) @db.Uuid
  userId  String                @map("user_id") @db.Uuid
  user    User                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  token   String                @default(cuid()) @db.VarChar(255)
  type    VerificationTokenType
  expires DateTime
  revoked DateTime?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([expires(sort: Desc), revoked(sort: Desc)])
  @@map("verification_tokens")
}

model Room {
  id      String  @id @default(uuid()) @db.Uuid
  name    String  @db.VarChar(255)
  isGroup Boolean @default(false) @map("is_group")

  photoUrl    String? @map("photo_url") @db.VarChar(450)
  coverUrl    String? @map("cover_url") @db.VarChar(450)
  themeSource BigInt? @map("theme_source")
  themeStyle  String? @map("theme_style") @db.Text

  lastActivatedAt DateTime? @map("last_activated_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  roomMembers  RoomMember[]
  roomMessages RoomMessage[]

  @@index([lastActivatedAt(sort: Desc)])
  @@map("rooms")
}

enum RoomMemberRole {
  Administrator @map("administrator")
  Moderator     @map("moderator")
  Member        @map("member")
  None          @map("none")

  @@map("room_member_role")
}

model RoomMember {
  id String @id @default(uuid()) @db.Uuid

  roomId    String         @map("room_id") @db.Uuid
  room      Room           @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId  String         @map("member_id") @db.Uuid
  member    User           @relation(fields: [memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  nickName  String?        @map("nick_name") @db.VarChar(255)
  role      RoomMemberRole @default(Member)
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @default(now()) @updatedAt @map("updated_at")

  @@unique([roomId, memberId])
  @@map("room_members")
}

enum RoomMessageType {
  Text   @map("text")
  Icon   @map("icon")
  Icons  @map("icons")
  Link   @map("link")
  Image  @map("image")
  Images @map("images")
  Files  @map("files")
  Audios @map("audios")
  Videos @map("videos")
  None   @map("none")

  @@map("room_message_type")
}

model RoomMessage {
  id      String          @id @default(uuid()) @db.Uuid
  type    RoomMessageType @default(Text)
  content Json

  roomId String @map("room_id") @db.Uuid
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([roomId, createdAt(sort: Desc)])
  @@map("room_messages")
}

model Hashtag {
  id   String @id @default(uuid()) @db.Uuid
  name String @db.VarChar(360)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([updatedAt(sort: Desc)])
  @@map("hashtags")
}

enum WhinnyType {
  Owner   @map("owner")
  Quote   @map("quote")
  Repost  @map("repost")
  Comment @map("comment")

  @@map("whinny_type")
}

model Whinny {
  id       String     @id @default(uuid()) @db.Uuid
  urlId    BigInt     @default(autoincrement()) @map("url_id") @db.BigInt
  type     WhinnyType @default(Owner)
  userId   String     @map("user_id") @db.Uuid
  user     User       @relation(fields: [userId], references: [id])
  sourceId String?    @map("source_id") @db.Uuid
  source   Whinny?    @relation("whinnies", fields: [sourceId], references: [id])
  whinnies Whinny[]   @relation("whinnies")

  content String? @db.VarChar(360)

  publishDate DateTime @default(now()) @map("publish_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  whinnyMedias    WhinnyMedia[]
  whinnyReactions WhinnyReaction[]

  @@index([userId(sort: Desc), createdAt(sort: Desc), type(sort: Asc)])
  @@map("whinnies")
}

enum WhinnyMediaType {
  Image @map("image")
  Gif   @map("gif")
  Video @map("video")
  Link  @map("link")

  @@map("whinny_media_type")
}

model WhinnyMedia {
  id           String          @id @default(uuid()) @db.Uuid
  type         WhinnyMediaType
  whinnyId     String          @map("whinny_id") @db.Uuid
  whinny       Whinny          @relation(fields: [whinnyId], references: [id])
  sort         Int             @db.SmallInt
  mime         String?         @db.VarChar(16)
  url          String          @db.VarChar(360)
  thumbnailUrl String?         @db.VarChar(2048)

  @@index([whinnyId, type, sort(sort: Asc)])
  @@map("whinny_medias")
}

enum WhinnyReactionKind {
  Favorite   @map("favorite")
  Unfavorite @map("unfavorite")
  Glad       @map("glad")
  Sad        @map("sad")
  Mad        @map("mad")
  Other      @map("other")
  None       @map("none")

  @@map("whinny_reaction_kind")
}

model WhinnyReaction {
  id       String             @id @default(uuid()) @db.Uuid
  whinnyId String             @map("whinny_id") @db.Uuid
  whinny   Whinny             @relation(fields: [whinnyId], references: [id])
  userId   String             @map("user_id") @db.Uuid
  user     User               @relation(fields: [userId], references: [id])
  kind     WhinnyReactionKind @default(Favorite)
  icon     String?            @db.VarChar(16)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([whinnyId, userId])
  @@index([whinnyId, createdAt(sort: Desc)])
  @@map("whinny_reactions")
}

enum NotificationEntityName {
  User        @map("user")
  Room        @map("room")
  RoomMessage @map("roomMessage")
  RoomMember  @map("roomMember")
  None        @map("none")

  @@map("notification_entity_name")
}

enum NotificationStatus {
  Queued    @map("queued")
  Sent      @map("sent")
  Delivered @map("delivered")
  Viewed    @map("viewed")
  Read      @map("read")
  Archived  @map("archived")

  @@map("notification_status")
}

model Notification {
  id           String                 @id @default(uuid()) @db.Uuid
  referenceId  String?                @map("reference_id") @db.Uuid
  entity       NotificationEntityName @default(None)
  sourceUserId String                 @map("source_user_id") @db.Uuid
  sourceUser   User                   @relation(name: "fk_notification_source", fields: [sourceUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  targetUserId String                 @map("target_user_id") @db.Uuid
  targetUser   User                   @relation(name: "fk_notification_target", fields: [targetUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  code         String                 @db.VarChar(255)
  params       Json
  status       NotificationStatus
  viewedAt     DateTime?              @map("viewed_at")
  readAt       DateTime?              @map("read_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([targetUserId, createdAt(sort: Desc)])
  @@map("notifications")
}
